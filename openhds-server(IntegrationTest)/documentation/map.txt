org.openhds
==========

community: DHIS
java/.community
    .beans: export beans & initialisation code
    .builder: builds beans
    .controller: 
    .service: interfaces
        .impl: service to create document
    .servlet: HttpServlet to generate and return document
resources/META-INF/spring/
    communityApplicationContext.xml: import other XMLs and define beans
xsd/: dxf2.xsd and sample xml

controller:
java/.controller
    .aop: authorisation checker
    .exception: exception classes
    .idgeneration: generate IDs plus checksums and validate them
    .security: authentication using Spring
    .service: interfaces
        .impl: services to interact with DB tables
    .util: UserCache bean, runner for DB scripts, DB schema generator
resources/
    site-config.properties: properties for controller code
    openhds-schema-ddl.sql: DB schema
    openhds-required-data.sql: minimal DB entries
    hibernate.cfg.xml: DB connection properties and connection to domain model classes
resources/META-INF/spring/
    controllerSecurityContext.xml: Spring authentication
    controllerApplicationContext.xml: import other XMLs and define beans for idgeneration, service, aop, security and util.UserCache

dao:
java/.dao
    .finder: DAO-AOP connector, queries
    .service: interfaces
        .impl: DAO (DB encapsulation?)
resources/
    import.sql: minimal DB entries
resources/META-INF/spring/
    daoApplicationContext.xml: import other XMLs and define beans

dataextensions:
java/.configuration
    services and Main (entrypoint)
java/.extensions:
    build some DB documents
dataextensions-0.0.1.jar: lots of compiled code

datageneration:
java/.datageneration
    .beans: bean / service code
    .generator: generate DB entries within constraints
    .service: interfaces
        .impl: controlling services
    .utils: hibernate "issue circumventor", beans
resources/META-INF/spring/
    dataGenerationApplicationContext.xml: import other XMLs and define beans

ddi:
java/.ddi
    .beans: Study bean
    .builder: document builders (Study and others)
    .controller: controls building
    .service:
    .servlet: HttpServlet
resources/META-INF/spring/
    ddiApplicationContext.xml: import other XMLs and define beans
xsd/ddi-version2-1.xsd: XSD for DDI

documentation:
getting-started/: ODTs for docs
README.txt

domain:
java/.domain
    .annotations: Java Annotations: Authorized (DB permissions) and Description
    .constraint: interfaces, including error messages
        .impl: "constraints" (annotations on parts of the schema, like dates and relationships)
    .model: table schemas (including descriptions), enum constants, AsyncTask and AppSettings
        .wrappers: classes which are essentially a list of a .model class
    .service: ValueConstraintService and SitePropertiesService
    .util: functions to copy some .model classes, Calendar functions, ApplicationContext wrapper bean
resources/
    value-constraint.xml: some constraint codes and descriptions
    extension-config.xml: template allowing schema extensions?
resources/META-INF/spring/
    domainApplicationContext.xml: beans, Jaxb2Marshaller

report:
java/.report
    .beans: beans storing "report" data
    .service: interfaces
        .impl: get report info
resources/
    views.properties: class names and URLs
resources/META-INF/spring/
    reportApplicationContext.xml: beans

specialstudy:
java/.specialstudy
    .dao: DAO for OpenHDS DB
    .domain: domain stuff (extension?)
    .security: custom auth stuff
    .util: schema generator
    .web: controller classes for some tables
resources/
    *.sql: schema and minimal data (an extension of those in controller, presumably)
    webservice.properties: define URL
resources/META-INF/
    persistence.xml: hibernate settings
resources/META-INF/spring/
    log4j.properties
    database.properties
    applicationContext.xml: configure scan for property files, dependency injection and certain spring annotations, as well as some beans
    applicationContext-security.xml: some HTTP security settings and some beans
webapp/
    images, CSS
    WEB-INF/
        views/: views.xml files (extensions of some type) and .jspx files
        .properties, .jspx, .xml, .tagx files
test/
    Tests for .scecialstudy.domain classes

task:
java/.task
    Utilities for XML tasks and DB session services therefore
resources/META-INF/spring/
    taskContext.xml: spring settings for the module
resources/xml/
    sample DB entries in XML form

web:
java/.web
    .beans: beans backing web pages and for various services
    .crud: generic class for CRUD actions
        .impl: extensions for specific tables
    .cvt: (de)serialisers
    .security: authentication
    .service: interfaces
        .impl: services (validation, authentication and ...)
    .ui: classes for paging of results and navigation
    .util: other stuff
    .vld: validators (for dates)
resources/
    *.sql: schema, minimal data, test data (seen some of this before?)
    *.properties: messages, log4j, locale, location levels, database, codes (abbreviations) 
resources/META-INF/spring/
    application-context.xml: imports, beans, security, scans
webapp/
    *-flow.xml: flow configuration
    *.xhtml, index.jsp: web pages
    *.pdf: getting started documentation
    reports/*.jrxml: jasperreports crud
    resources/
        CSS, icons, images
        JavaScript libraries (jQuery and others)
    WEB-INF/*.xml: JSF and spring config
test/java/.web
    unit tests
test/resources
    test SQL and XML data (some of which is similar to other test data)

webservice:
java/.webservice
    .resources: "resource" things built on tables (what for?)
resources/META-INF/spring/
    webserviceApplicationContext.xml
