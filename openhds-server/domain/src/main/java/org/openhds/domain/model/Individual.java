package org.openhds.domain.model;

import org.openhds.domain.annotations.Description;
import org.openhds.domain.constraint.*;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Past;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import java.io.Serializable;
import java.util.*;

/**
 * Generated by JCodeModel
 *
 */
@Description(description = "An Individual represents one who is a part of the study. Each Individual is identified by a uniquely generated external identifier which the system uses internally. Information about the Individual such as name, gender, date of birth, and parents are stored here. An Individual may be associated with many Residencies, Relationships, and Memberships.")
@CheckMotherFatherNotIndividual
@Entity
@Table(name = "individual")
@XmlRootElement(name = "individual")
public class Individual extends AuditableCollectedEntity implements Serializable {

    public final static long serialVersionUID = 9058114832143454609L;
    @NotNull
    @Size(min = 1)
    @Searchable
    @Description(description = "External Id of the individual. This id is used internally.")
    private String extId;
    @NotNull
    @Searchable
    @Description(description = "First name of the individual.")
    private String firstName;
    @Searchable
    @Description(description = "Middle name of the individual.")
    private String middleName;
    @CheckFieldNotBlank
    @Searchable
    @Description(description = "Last name of the individual.")
    private String lastName;
    @ExtensionStringConstraint(constraint = "genderConstraint", message = "Invalid Value for gender", allowNull = true)
    @Description(description = "The gender of the individual.")
    private String gender;
    @Past(message = "Date of birth must a date in the past")
    @Temporal(TemporalType.DATE)
    @Description(description = "Birth date of the individual.")
    private Calendar dob;
    @CheckIndividualGenderFemale(allowNull = true, message = "The mother specified is not female gender")
    @CheckIndividualParentAge(allowNull = true, message = "The mother is younger than the minimum age required in order to be a parent")
    @CheckEntityNotVoided(allowNull = true, message = "The mother has been voided")
    @ManyToOne(fetch = FetchType.LAZY, targetEntity = org.openhds.domain.model.Individual.class)
    @Description(description = "The individual's mother, identified by the external id.")
    private org.openhds.domain.model.Individual mother;
    @CheckIndividualGenderMale(allowNull = true, message = "The father specified is not male gender")
    @CheckIndividualParentAge(allowNull = true, message = "The father is younger than the minimum age required in order to be a parent")
    @CheckEntityNotVoided(allowNull = true, message = "The father has been voided")
    @ManyToOne(fetch = FetchType.LAZY, targetEntity = org.openhds.domain.model.Individual.class)
    @Description(description = "The individual's father, identified by the external id.")
    private org.openhds.domain.model.Individual father;
    @ExtensionStringConstraint(constraint = "dobAspectConstraint", message = "Invalid Value for partial date", allowNull = true)
    @Description(description = "Identifer for determining if the birth date is partially known.")
    private String dobAspect;

    @OneToMany(mappedBy = "individual", cascade = { CascadeType.ALL })
    @OrderBy("startDate")
    @Description(description = "The set of all residencies that the individual may have.")
    private Set<Residency> allResidencies = new HashSet<Residency>();
    @OneToMany(mappedBy = "individualA", cascade = { CascadeType.ALL })
    @Description(description = "The set of all relationships that the individual may have with another individual.")
    private Set<Relationship> allRelationships1 = new HashSet<Relationship>();
    @OneToMany(mappedBy = "individualB", cascade = { CascadeType.ALL })
    @Description(description = "The set of all relationships where another individual may have with this individual.")
    private Set<Relationship> allRelationships2 = new HashSet<Relationship>();
    @OneToMany(mappedBy = "individual", cascade = { CascadeType.ALL })
    @Description(description = "The set of all memberships the individual is participating in.")
    private Set<Membership> allMemberships = new HashSet<Membership>();

    //Project-specific fields
    @Column
    private int age;
    @Column
    private String ageUnits;
    @Column
    private String phoneNumber;
    @Column
    private String otherPhoneNumber;
    @Column
    private String languagePreference;
    @Column
    private String pointOfContactName;
    @Column
    private String pointOfContactPhoneNumber;
    @Column
    private int dip;
    @Column
    private String memberStatus;
    @Column
    private String nationality;

    public String getExtId() {
        return extId;
    }

    public void setExtId(String id) {
        extId = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String name) {
        firstName = name;
    }

    public String getMiddleName() {
        return middleName;
    }

    public void setMiddleName(String name) {
        middleName = name;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String name) {
        lastName = name;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String sex) {
        gender = sex;
    }

    @XmlJavaTypeAdapter(org.openhds.domain.util.CalendarAdapter.class)
    public Calendar getDob() {
        return dob;
    }

    public void setDob(Calendar date) {
        dob = date;
    }

    public org.openhds.domain.model.Individual getMother() {
        return mother;
    }

    public void setMother(org.openhds.domain.model.Individual mom) {
        mother = mom;
    }

    public org.openhds.domain.model.Individual getFather() {
        return father;
    }

    public void setFather(org.openhds.domain.model.Individual dad) {
        father = dad;
    }

    public String getDobAspect() {
        return dobAspect;
    }

    public void setDobAspect(String aspect) {
        dobAspect = aspect;
    }

    @XmlElementWrapper(name = "residencies")
    @XmlElement(name = "residency")
    public Set<Residency> getAllResidencies() {
        return allResidencies;
    }

    public void setAllResidencies(Set<Residency> list) {
        allResidencies = list;
    }

    public Set<Relationship> getAllRelationships1() {
        return allRelationships1;
    }

    public void setAllRelationships1(Set<Relationship> list) {
        allRelationships1 = list;
    }

    public Set<Relationship> getAllRelationships2() {
        return allRelationships2;
    }

    public void setAllRelationships2(Set<Relationship> list) {
        allRelationships2 = list;
    }

    @XmlElementWrapper(name = "memberships")
    @XmlElement(name = "membership")
    public Set<Membership> getAllMemberships() {
        return allMemberships;
    }

    public void setAllMemberships(Set<Membership> list) {
        allMemberships = list;
    }

    public Residency getCurrentResidency() {
        if (allResidencies.size() == 0) {
            return null;
        }

        // sort by "earliest" and pick off the "least early" ie "latest"
        PriorityQueue<Residency> residencyHeap = new PriorityQueue<Residency>(
                allResidencies.size(), Residency.earliestByStartDateAndInsertDate());
        residencyHeap.addAll(allResidencies);

        return residencyHeap.peek();
    }

    //Project-specific get/set
    public void setAge(int age) {
        this.age = age;
    }

    public int getAge() {
        return age;
    }

    public void setAgeUnits(String ageUnits) {
        this.ageUnits = ageUnits;
    }

    public String getAgeUnits() {
        return ageUnits;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setOtherPhoneNumber(String otherPhoneNumber) {
        this.otherPhoneNumber = otherPhoneNumber;
    }

    public String getOtherPhoneNumber() {
        return otherPhoneNumber;
    }

    public void setLanguagePreference(String languagePreference) {
        this.languagePreference = languagePreference;
    }

    public String getLanguagePreference() {
        return languagePreference;
    }

    public void setPointOfContactName(String pointOfContactName) {
        this.pointOfContactName = pointOfContactName;
    }

    public String getPointOfContactName() {
        return pointOfContactName;
    }

    public void setPointOfContactPhoneNumber(String pointOfContactPhoneNumber) {
        this.pointOfContactPhoneNumber = pointOfContactPhoneNumber;
    }

    public String getPointOfContactPhoneNumber() {
        return pointOfContactPhoneNumber;
    }

    public void setDip(int dip) {
        this.dip = dip;
    }

    public int getDip() {
        return dip;
    }

    public void setMemberStatus(String memberStatus) {
        this.memberStatus = memberStatus;
    }

    public String getMemberStatus() {
        return memberStatus;
    }

    public String getNationality() {
        return nationality;
    }

    public void setNationality(String nationality) {
        this.nationality = nationality;
    }

    public static Individual makeStub(String uuid, String extId) {
        Individual stub = new Individual();
        stub.setUuid(uuid);
        stub.setExtId(extId);
        return stub;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) {
            return true;
        }

        if (!(other instanceof Individual)) {
            return false;
        }

        final String otherUuid = ((Individual) other).getUuid();
        return null != uuid && null != otherUuid && uuid.equals(otherUuid);
    }

    @XmlRootElement
    public static class Individuals {
        private List<Individual> individuals;

        @XmlElement(name = "individual")
        public List<Individual> getIndividuals() {
            return individuals;
        }

        public void setIndividuals(List<Individual> individuals) {
            this.individuals = individuals;
        }
    }

}
